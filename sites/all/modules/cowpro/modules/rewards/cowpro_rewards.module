<?php
define("SIX_RATE", "10.20");
define("TWELVE_RATE", "10.80");
/**
 * Implementation of hook_menu()
 */
function cowpro_rewards_menu() {
	$items ['cowpro/rewards/check_in'] = array (
			'title' => '签到',
			'description' => '',
			'page callback' => 'cowpro_rewards_check_in',
			'page arguments' => array (),
			'access callback' => 'user_is_logged_in',
			'type' => MENU_NORMAL_ITEM,
	);
	$items ['cowpro/rewards/employee_registration'] = array (
			'title' => '员工登记',
			'description' => '',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'cowpro_rewards_employee_registration_form'
			),
			'access arguments' => array (
					'access user profiles',
			),
			'file' => 'includes/rewards.employee_registration.inc',
			'type' => MENU_NORMAL_ITEM,
	);
	$items ['cowpro/rewards/february'] = array (
			'title' => '二月推荐奖励列表',
			'description' => '',
			'page callback' => 'cowpro_rewards_february',
			'access arguments' => array (
					'configure p2p',
			),
			'type' => MENU_NORMAL_ITEM,
	);
        $items ['cowpro/rewards/report'] = array (
			'title' => '平台运营统计报表',
			'description' => '',
			'page callback' => 'cowpro_rewards_operating_report',
			'access arguments' => array (
					'advanced report',
			),
			'type' => MENU_NORMAL_ITEM,
	);
        $items ['cowpro/rewards/get_balance_amount'] = array (
			'title' => '生成借款人余额',
			'description' => '',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'cowpro_rewards_get_balance_amount_go_form'
			),
			'access arguments' => array (
					'advanced report'
			),
                        'file' => 'includes/rewards.get_balance.inc',
			'type' => MENU_NORMAL_ITEM
	);
        $items ['cowpro/rewards/issuing_large'] = array (
                'title' => '大额奖励明细',
                'description' => '',
                'page callback' => 'cowpro_rewards_insert_issuing_large_data',
                'access arguments' => array (
                                'configure p2p'
                ),
                'type' => MENU_NORMAL_ITEM
	);
         $items ['cowpro/rewards/issuing_large_op'] = array (
                'title' => '大额奖励转账',
                'description' => '',
                'page callback' => 'drupal_get_form',
                'page arguments' => array (
					'cowpro_rewards_issuing_large_go_form'
			),
                'access arguments' => array (
                                'configure p2p'
                ),
                'file' => 'includes/rewards.issuing_large.inc',
                'type' => MENU_NORMAL_ITEM
	);
        $items ['cowpro/rewards/debto_paid_total_capital'] = array (
                'title' => '融资人全部已还本金',
                'description' => '',
                'page callback' => 'cowpro_rewards_debto_paid',
                'access arguments' => array (
                                'advanced report'
                ),
                'type' => MENU_NORMAL_ITEM
	);
        $items ['cowpro/rewards/debto_nopaid_total_capital'] = array (
                'title' => '融资人全部已还本金',
                'description' => '',
                'page callback' => 'cowpro_rewards_debto_nopaid',
                'access arguments' => array (
                                'advanced report'
                ),
                'type' => MENU_NORMAL_ITEM
	);
	return $items;
}

// 2018 2月推荐奖励
function cowpro_rewards_february() {
	$result = db_query ( "SELECT requester_id,requestee_id FROM {user_relationships} WHERE rtid=1" )->fetchAll ( PDO::FETCH_ASSOC );
	$list = array ();
	$bount1 = array ();
	$bount2 = array ();
	foreach ( $result as $value ) {
		$list [$value ['requestee_id']] [] = $value ['requester_id'];
	}

	foreach ( $list as $key => $value ) {

		$implode_string = implode ( ",", $list [$key] );
		$start_time = strtotime ( "2018-02-01 00:00:00" );
		$end_time = strtotime ( "2018-02-28 23:59:59" );
		$result_bid_count = db_query ( "SELECT distinct uid FROM {cowpro_fund_journal} WHERE type='BID' AND status=1 AND uid in(" . $implode_string . ") AND amount >= 10000 AND created>='" . $start_time . "' AND created<='" . $end_time . "'" )->fetchAll ( PDO::FETCH_ASSOC );

		$bount1 [$key] ['count'] = $result_bid_count [0] ['count'];
		$bount2_uid = db_query ( "SELECT requestee_id FROM {user_relationships} WHERE rtid=1 AND requester_id=" . $key )->fetchAll ( PDO::FETCH_ASSOC );
		if (! empty ( $bount2_uid )) {
			$bount2 [$bount2_uid [0] ['requestee_id']] ['count'] = $result_bid_count [0] ['count'];
		}
	}

	foreach ( $bount1 as $key => $value ) {
		$profile_real_name = cowpro_customer_profile_load_one_row_with_conditions ( $key, 'real_name' );
		if ($profile_real_name)
			$bount1 [$key] ['name'] = $profile_real_name->name;

		if ($value ['count'] - 2 > 0) {
			$bount1 [$key] ['amount'] = ($value ['count'] - 2) * 20;
			$bount1 [$key] ['voucher'] = ($value ['count'] - 2) * 30;
		} else {
			unset ( $bount1 [$key] );
		}
	}

	foreach ( $bount2 as $key => $value ) {

		if ($value ['count'] > 0) {
			$profile_real_name = cowpro_customer_profile_load_one_row_with_conditions ( $key, 'real_name' );
			if ($profile_real_name)
				$name = $profile_real_name->name;
			$bount2 [$key] ['amount'] = $value ['count'] * 10;
			$bount2 [$key] ['name'] = $name;
		} else {
			unset ( $bount2 [$key] );
		}
	}

	$html = theme ( 'cowpro_rewards_february', array (
			'bount1' => $bount1,
			'bount2' => $bount2,
	) );
	return $html;
}

/**
 * Implements hook_theme().
 */
function cowpro_rewards_theme() {
	return array (
			'cowpro_rewards_february' => array (
					'variables' => array (
							'bount1' => NULL,
							'bount2' => NULL
					),
					'template' => 'cowpro-rewards-february'
			),
                        
                        'cowpro_rewards_report' => array (
					'variables' => array (
							'result' => NULL,
					),
					'template' => 'cowpro-rewards-report'
			)
	);
}
function cowpro_rewards_check_in() {
	$uid = $GLOBALS ['user']->uid;
	if (cowpro_rewards_have_checked_in ()) {
		drupal_set_message ( '您已经签过到了！', 'warning' );
		drupal_goto ();
		return;
	}

	db_merge ( 'cowpro_rewards_checkin' )->key ( array (
			'uid' => $uid
	) )->fields ( array (
			'uid' => $uid,
			'last_checkin' => time ()
	) )->execute ();

	$points = 1;
	$params = array (
			'uid' => $uid,
			'points' => $points,
			'description' => '签到奖励',
			'display' => FALSE,
			'tid' => 0
	) // 积分
;
	userpoints_userpointsapi ( $params );

	drupal_set_message ( '签到奖励积分1个！' );
	drupal_goto ();
	// return '欢迎签到';
}
function cowpro_rewards_have_checked_in() {
	$uid = $GLOBALS ['user']->uid;
	$start_time = mktime ( 0, 0, 0, date ( "n" ), date ( "j" ), date ( "Y" ) ); // 今天零时
	$query = db_select ( 'cowpro_rewards_checkin', 'checkin' )->fields ( 'checkin', array (
			'uid',
			'last_checkin'
	) )->condition ( 'uid', $uid )->condition ( 'last_checkin', $start_time, '>' );

	if ($query->execute ()->fetchObject ()) {
		return TRUE;
	} else {
		return FALSE;
	}
}

/*
 仅用于测试，当用户登录的时候，触发cowpro_fund_bid_finished event
 */
/*
function cowpro_rewards_user_login(&$edit, $account) {
	$uid = $GLOBALS ['user']->uid;
	if ($uid != 70041) {//只有用户 bigbug 登录的时候，才触发后面的逻辑
		return;
	}

	$issuing_id = 2500;
	$period = 1;
	$node = node_load($issuing_id);

	$repayment_schedules = array();
	$conditions = array (
			'issuing_id' => $issuing_id,
			'period' => $period,
			//'status' => 'WAITING_FOR',
	);
	$reset = FALSE;
	$schedules = entity_load ( 'cowpro_repayment_schedule', FALSE, $conditions, $reset );
	foreach ($schedules as $schedule) {
		if ($schedule->receiver_uid != -1) {
			$repayment_schedules[] = $schedule;
		}
	}

	rules_invoke_event('cowpro_fund_repayment_finished', TRUE, $node, $repayment_schedules);
 }
*/

//平台运营统计报表
function cowpro_rewards_operating_report(){
    include 'includes/rewards.get_balance.inc';
     $block = block_load('cowpro_rewards', 'rewards_report');
     $block_content = _block_render_blocks(array($block));  
     $build = _block_get_renderable_array($block_content);  
     $result = $build['cowpro_rewards_rewards_report'];
     $html = theme ( 'cowpro_rewards_report', array (
			'result' => $result,
     ) );
   
    return $html;
}

/**
 * Implements hook_block_info().
 */
function cowpro_rewards_block_info() {
	$blocks = array();
	$blocks['rewards_report'] = array(
			'info' => '显示平台运营报表',
	);

	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cowpro_rewards_block_view($delta = '') {
	$block = NULL;

  switch ($delta) {
    case 'rewards_report':
            //平台借出总额
           $data['lend_total'] = db_query("SELECT SUM(field_issuing_loan_amounts) FROM {field_revision_field_issuing} WHERE field_issuing_status = 'REPAYMENT' or field_issuing_status='FINISHED'")->fetchField();
            //已还利息总额
            $data['interest_paid_total'] = db_query("SELECT SUM(interest) FROM {cowpro_repayment_schedule} WHERE status = 'COMPLETED' AND receiver_uid != -1")->fetchField();
            //已还总额(本金加利息)
            $data['paid_total'] = db_query("SELECT SUM(interest + capital) FROM {cowpro_repayment_schedule} WHERE status = 'COMPLETED' AND receiver_uid != -1")->fetchField();
            //待还总额(本金加利息)
            $data['wait_paid_total'] = db_query("SELECT SUM(interest + capital) FROM {cowpro_repayment_schedule} WHERE status = 'WAITING_FOR' AND receiver_uid != -1")->fetchField();
            //会员总人数
            $data['user_total'] = db_query("SELECT COUNT(*) FROM {users}")->fetchField();
            //已投资会员数
            $data['user_bid_total'] = db_query("SELECT COUNT(distinct(uid)) FROM {cowpro_fund_journal} WHERE type = 'BID'")->fetchField();
            //在投用户数
            $data['user_biding_total'] = db_query("SELECT  COUNT(distinct(receiver_uid)) FROM {cowpro_repayment_schedule} WHERE status = 'WAITING_FOR' AND receiver_uid != -1")->fetchField();
           

           
           //本月到期本金
           $data['month_capital_total'] = db_query("SELECT SUM(capital) FROM {cowpro_repayment_schedule} WHERE FROM_UNIXTIME( deadline, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' ) AND receiver_uid != -1")->fetchField();
           //本月到期利息
           $data['month_revenus_total'] = db_query("SELECT SUM(interest) FROM {cowpro_repayment_schedule} WHERE FROM_UNIXTIME( deadline, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' ) AND receiver_uid != -1")->fetchField();
           //本月到期总额
           $data['month_total'] = $data['month_capital_total'] + $data['month_revenus_total'];
           
           
           
            //今日到期本金
           $data['day_capital_total'] = db_query("SELECT SUM(capital) FROM {cowpro_repayment_schedule} WHERE FROM_UNIXTIME( deadline, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND receiver_uid != -1")->fetchField();
           //今日到期利息
           $data['day_revenus_total'] = db_query("SELECT SUM(interest) FROM {cowpro_repayment_schedule} WHERE FROM_UNIXTIME( deadline, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND receiver_uid != -1")->fetchField();
           //今日到期总额
           $data['day_total'] = $data['day_capital_total'] + $data['day_revenus_total'];
           
           //借款人账户总余额

           
           //今日出借人充值成功总额
            $lender_uids = cowpro_rewords_get_role_uids('lender');
            $data['lender_topup'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'TOPUP' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1 AND uid in(".implode(",", $lender_uids).")")->fetchField();

            //今日借款人充值成功总额
            $debtor_uids = cowpro_rewords_get_role_uids('debtor');
            $data['debtor_topup'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'TOPUP' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1 AND uid in(".implode(",", $debtor_uids).")")->fetchField();
            
            //今日出借人提现成功总额
            $data['lender_withdraw'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'WITHDRAW' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1 AND uid in(".implode(",", $lender_uids).")")->fetchField();
            
            //今日借款人提现成功总额
           $data['debtor_withdraw'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'WITHDRAW' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1 AND uid in(".implode(",", $debtor_uids).")")->fetchField();
           
           //今日客户充值总额
           $data['users_topup'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'TOPUP' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1")->fetchField();
           
           //今日客户提现总额
           $data['users_withdraw'] = db_query("SELECT  SUM(amount) FROM {cowpro_fund_journal} WHERE type = 'WITHDRAW' AND FROM_UNIXTIME( created, '%Y%m%d' ) = DATE_FORMAT( CURDATE( ) , '%Y%m%d' ) AND status =1")->fetchField();
           
           //借款人总余额
           $data['debtor_total_balance'] = db_query("SELECT  SUM(balance) FROM {user_balance}")->fetchField();
           
           //今日投标总额
            $day_bid_list = db_query("SELECT  f.amount,i.field_issuing_loan_term FROM {cowpro_fund_journal} as f LEFT JOIN {field_revision_field_issuing} as i ON f.issuing_id=i.entity_id WHERE f.type = 'BID' AND TO_DAYS(NOW()) = TO_DAYS(FROM_UNIXTIME(f.created)) AND f.status =1")->fetchAll();
            $data['day_total_bid'] = 0;
            $data['day_total_bid_3'] = 0;
            $data['day_total_bid_6'] = 0;
            $data['day_total_bid_12'] = 0;

            foreach( $day_bid_list as $v ){
                $data['day_total_bid'] += $v->amount;
                if( $v->field_issuing_loan_term == 90 ) {
                    $data['day_total_bid_3'] += $v->amount;
                }else if( $v->field_issuing_loan_term == 180 ){
                    $data['day_total_bid_6'] += $v->amount;
                }else if( $v->field_issuing_loan_term == 360 ){
                    $data['day_total_bid_12'] += $v->amount;
                }
            }
            
            //所有待还本金
            $data['all_total_capital'] = db_query("SELECT SUM(capital) FROM {cowpro_repayment_schedule} WHERE receiver_uid != -1 AND status = 'WAITING_FOR'")->fetchField();
            
            //所有待还利息
            $data['all_total_interest'] = db_query("SELECT SUM(interest) FROM {cowpro_repayment_schedule} WHERE receiver_uid != -1 AND status = 'WAITING_FOR'")->fetchField();
        
            //借款人余额列表
           $data['debtor_total_balance_list'] = db_query("SELECT  name,balance,nickname FROM {user_balance} WHERE balance > 0 order by balance desc")->fetchAll();
           $output = drupal_get_form("cowpro_rewards_get_balance_amount_go_form");
           $output = drupal_render($output);
           $data['output_html'] = $output;
	   $block['subject'] = '';
	   $block['content'] = $data;
           
		break;
   	default:
   		break;
  }
  if ($block) {
  	return $block;
  }
}

function cowpro_rewards_debto_paid(){
    $result = db_query("SELECT SUM(payable_amount - interest) as amount,payer_uid FROM {cowpro_repayment_schedule} WHERE period = period_total AND status = 'COMPLETED' AND receiver_uid != -1 GROUP BY payer_uid")->fetchAll();
    foreach( $result as $key=>$value ){
        $profile_real_name = cowpro_customer_profile_load_one_row_with_conditions ( $value->payer_uid, 'real_name' );
        $result[$key]->name = $profile_real_name->name;
    }
    var_dump($result);
}

function cowpro_rewards_debto_nopaid(){
    $result = db_query("SELECT SUM(payable_amount - interest) as amount,payer_uid FROM {cowpro_repayment_schedule} WHERE period = period_total AND status = 'WAITING_FOR' GROUP BY payer_uid")->fetchAll();
    foreach( $result as $key=>$value ){
        $profile_real_name = cowpro_customer_profile_load_one_row_with_conditions ( $value->payer_uid, 'real_name' );
        $result[$key]->name = $profile_real_name->name;
    }
    var_dump($result);
}

function cowpro_rewords_get_role_uids($role){
        $uids = array();
        $role_obj = user_role_load_by_name($role);
        $result = db_select('users_roles', 'ur')
          ->fields('ur')
          ->condition('ur.rid', $role_obj->rid, '=')
          ->execute();
        foreach ($result as $record) {
            if( $record->uid != 1 ) {
                $uids[] = $record->uid;
            }
        }
        return $uids;
}

function cowpro_rewards_permission() {
  $permissions = array(
    'advanced report' => array(
      'title' => t('see Advanced report'),
      'description' => '',
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

//大额奖励报表
function cowpro_rewards_insert_issuing_large_data(){
    //上个月日期
   $rewards_date = date("Ym",mktime(0, 0 , 0,date("m")-1,1,date("Y")));
   $result = db_query("SELECT  f.amount as amount,i.field_issuing_loan_term as term,f.uid,f.issuing_id FROM {cowpro_fund_journal} as f LEFT JOIN {field_revision_field_issuing} as i ON f.issuing_id=i.entity_id WHERE f.type = 'BID' AND FROM_UNIXTIME( f.created, '%Y%m' ) = '".$rewards_date."' AND f.status =1 AND i.field_issuing_loan_term != 90")->fetchAll();
   $list = array();

   foreach( $result as $key=>$item ){
       $array = array();
       $array = get_object_vars($item);
       $list[$item->uid][$item->term][] = $array;
   }
   
    foreach( $list as $key=>$item ){
       foreach( $item as $_key=>$_item ){
            $total_amount = 0;
             foreach( $_item as $__key=>$__item ){
                 $total_amount += $__item['amount'];
             }
             foreach( $_item as $__key=>$__item ){
                 $list[$key][$_key][$__key]['total_amount'] = $total_amount;
             }
           
             if( $total_amount < 100000 ) {
                 unset($list[$key][$_key]);
             }
       }
       if( empty($list[$key][$_key]) ) {
            unset($list[$key]);
        }
   }

   foreach( $list as $key=>$item ){
       foreach( $item as $_key=>$_item ){
           foreach( $_item as $__key=>$__item ){
               if( $_key == 180 ) {
                    if( $__item['total_amount'] >= 100000 && $__item['total_amount'] < 200000 ) {
                        $rewards_rate = 10.44;
                        $rewards_level = 1;
                    }else if( $__item['total_amount'] >= 200000 && $__item['total_amount'] < 300000 ){
                        $rewards_rate = 10.92;
                        $rewards_level = 2;
                    }else if( $__item['total_amount'] >= 300000 && $__item['total_amount'] < 400000 ){
                        $rewards_rate = 11.40;
                        $rewards_level = 3;
                    }else if( $__item['total_amount'] >= 400000 && $__item['total_amount'] < 500000 ){
                        $rewards_rate = 11.64;
                        $rewards_level = 4;
                    }else if( $__item['total_amount'] >= 500000 ){
                        $rewards_rate = 11.88;
                        $rewards_level = 5;
                    }
                    $rewards_nominal = SIX_RATE;
                    $list[$key][$_key][$__key]['rewards_amount'] = ($rewards_rate - $rewards_nominal) / 100 * $__item['amount'] / ($_key / 30) / 2;
             
                }else if( $_key == 360 ){
                    if( $__item['total_amount'] >= 100000 && $__item['total_amount'] < 200000 ) {
                        $rewards_rate = 11.28;
                        $rewards_level = 1;
                    }else if( $__item['total_amount'] >= 200000 && $__item['total_amount'] < 300000 ){
                        $rewards_rate = 12.24;
                        $rewards_level = 2;
                    }else if( $__item['total_amount'] >= 300000 && $__item['total_amount'] < 400000 ){
                        $rewards_rate = 13.20;
                        $rewards_level = 3;
                    }else if( $__item['total_amount'] >= 400000 && $__item['total_amount'] < 500000 ){
                        $rewards_rate = 13.68;
                        $rewards_level = 4;
                    }else if( $__item['total_amount'] >= 500000 ){
                        $rewards_rate = 14.16;
                        $rewards_level = 5;
                    }
                    $rewards_nominal = TWELVE_RATE;
                    $list[$key][$_key][$__key]['rewards_amount'] = ($rewards_rate - $rewards_nominal) / 100 * $__item['amount'] / ($_key / 30);
                    
                }
                
                $list[$key][$_key][$__key]['rewards_level'] = $rewards_level;
           }
           
       }
   }

   $last_month_date =  db_query("SELECT * FROM {cowpro_rewards_issuing_large} WHERE issuing_date='".$rewards_date."'")->fetchAll();
   if( !$last_month_date ) {
    foreach( $list as $key=>$item ){
        foreach( $item as $_key=>$_item ){
            foreach( $_item as $__key=>$__item ){
                $count = $_key / 30;
                for( $i = 1; $i <= $count; $i++ ){
                 db_insert('cowpro_rewards_issuing_large')
                 ->fields(array(
                   'uid' => $__item['uid'],
                    'issuing_id' => $__item['issuing_id'],
                    'rewards_date' => date("Ym",mktime(0, 0 , 0,date("m")-1+$i,1,date("Y"))),
                    'rewards_amount' => $__item['rewards_amount'],
                    'rewards_level' => $__item['rewards_level'],
                     'issuing_date' => $rewards_date,
                     'created' => time(),
                   ))
                 ->execute();
                }
            }
        }
    }
   }
   
   global $base_url;
   drupal_goto($base_url."/cowpro_issuing_large");
}


/**
 * Implements hook_views_api().
 */
function cowpro_rewards_views_api() {
	return array (
			'api' => 3,
			'path' => drupal_get_path ( 'module', 'cowpro_rewards' ) . '/includes/views'
	);
}






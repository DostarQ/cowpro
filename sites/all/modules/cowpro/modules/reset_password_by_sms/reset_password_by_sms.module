<?php
const RESET_PASSWORD_BY_SMS_TEMPLATE = '您在“[site:name]”网站的手机验证码是[code],请不要将验证码告诉别人,如果您没有在网站上要求通过手机重置密码,请忽略这条短信。';

/**
 * Implements hook_menu().
 *
 * @return array
 */
function reset_password_by_sms_menu() {
  $items['user/password_by_sms'] = array(
    'title' => '用手机重置密码',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reset_password_by_sms_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  $items ['cowpro/reset-password-send-code'] = array (
  		'title' => 'Reset Password Send Code',
  		'page callback' => 'reset_password_by_sms_send_code',
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items ['admin/cowpro/config_reset_password_by_sms'] = array (
  		'title' => '手机重设密码短信模板',
  		'description' => '设置手机重设密码短信的内容',
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array (
  				'reset_password_by_sms_settings_form',
  		),
  		'access arguments' => array (
  				'configure p2p',
  		),
  		'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function reset_password_by_sms_form($form, &$form_state) {
	global $base_url;
	drupal_add_js(array('basePath' => $base_url), 'setting');
	drupal_add_js ( drupal_get_path ( 'module', 'reset_password_by_sms' ) . '/reset_password_by_sms.js' );
	$form ['user_name'] = array (
			'#type' => 'textfield',
			'#title' => '用户名',
			'#description' => '',
			'#default_value' => '',
			'#maxlength' => 20,
			'#required' => TRUE,
			'#attributes' => array (
					'class' => array (
							'user_name',
					)
			),
			'#weight' => - 20,
	);

	$form ['mobile_number'] = array (
			'#type' => 'textfield',
			'#title' => '手机号码',
			'#description' => '',
			'#default_value' => '',
			'#maxlength' => 20,
			'#required' => TRUE,
			'#attributes' => array (
					'class' => array (
							'mobile_number',
					)
			),
			'#weight' => - 10,
	);

	$form ['verify_code'] = array (
			'#type' => 'textfield',
			'#title' => '验证码',
			'#default_value' => '',
			'#maxlength' => 20,
			'#required' => TRUE,
			'#weight' => - 5,
	);

	$form ['send_verify'] = array (
			'#id' => 'send_verify',
			'#type' => 'button',
			'#value' => '发送验证码',
			'#attributes' => array (
					'class' => array (
							'send-verify-code',
					)
			),
			'#weight' => 1,
	);

	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => '重置密码',
			'#weight' => 10,
	);

	$form ['mobile_verify_help'] = array (
			'#markup' => '<div id=mobile_verify_help><p></p></div>',
	);

	return $form;
}

function reset_password_by_sms_form_validate($form, &$form_state) {
	$validate_result = TRUE;
	if (!isset($_SESSION ['account_uid'])) {
		$validate_result = FALSE;
	}
	if (!isset($_SESSION ['reset_password_mobile_number'])) {
		$validate_result = FALSE;
	}
	if (!isset($_SESSION ['reset_password_code'])) {
		$validate_result = FALSE;
	}
	if ($validate_result && ($_SESSION ['reset_password_mobile_number'] != trim ( $form_state ['values'] ['mobile_number'] ))) {
		$validate_result = FALSE;
	}
	if ($validate_result && ($_SESSION ['reset_password_code'] != trim ( $form_state ['values'] ['verify_code'] ))) {
		$validate_result = FALSE;
	}

  $user_name = trim($form_state['values']['user_name']);
  $users = user_load_multiple(array(), array('name' => $user_name, 'status' => '1'));
  $account = reset($users);
  if ((!isset($account->uid)) || ($_SESSION ['account_uid'] != $account->uid)) {
		$validate_result = FALSE;
  }

	if (!$validate_result) {
		form_set_error ( '验证码', '您输入的验证码不正确.' );
	}
}
function reset_password_by_sms_form_submit($form, &$form_state) {
	$user_name = $form_state ['values'] ['user_name'];
  $users = user_load_multiple(array(), array('name' => $user_name, 'status' => '1'));
  $account = reset($users);
	$url = user_pass_reset_url($account);
	drupal_goto($url);
}

function reset_password_by_sms_send_code() {
	$mobile_number = $_GET ['mobile_number'];
	$user_name = trim($_GET ['user_name']);
	$validated = TRUE;
	$error_code = 0;

	if ($validated) {
		$validated_number = _reset_password_by_sms_phone_mumber_validate($mobile_number);
		if ($validated_number != 1) {
			$validated = FALSE;
			$error_code = $mobile_number;
		}
	}
	if ($validated) {
		$users = user_load_multiple(array(), array('name' => $user_name, 'status' => '1'));
		$account = reset($users);
		if (!isset($account->uid)) {
			$validated = FALSE;
			$error_code = 2;
		}
	}
	if ($validated) {
		$profile_mobile = cowpro_customer_profile_load_one_row_with_conditions($account->uid, 'mobile');
		if (is_null($profile_mobile) || (!property_exists($profile_mobile, 'mobile_number' ))) {
			$validated = FALSE;
			$error_code = 3;
		}
	}
	if ($validated) {
		$validated = $mobile_number == $profile_mobile->mobile_number;
		$error_code = 4;
	}

	if ($validated) {
		// 4-digit random code
		$code = rand ( pow ( 10, 3 ), pow ( 10, 4 ) - 1 );

		// save code in session
		$_SESSION ['account_uid'] = $account->uid;
		$_SESSION ['reset_password_code'] = $code;
		$_SESSION ['reset_password_mobile_number'] = $mobile_number;

		// watchdog('debug', "$key code: " . $code);

		$text = variable_get ( 'reset_password_by_sms_template', RESET_PASSWORD_BY_SMS_TEMPLATE );
		$site_name = variable_get ( 'site_name' );
		$text = str_replace ( '[site:name]', $site_name, $text );
		$text = str_replace ( '[code]', $code, $text );
		$successed = cowpro_message_send ( $mobile_number, $text );

		if ($successed) {
			$response = array (
					'status' => 200,
			);
		} else {
			$response = array (
					'status' => 500,
					'message' => '短消息发送失败，请联系网站管理员.',
			);
		}
	} else {
		$response = array (
				'status' => 500,
				'message' => '用户名与手机号码不匹配。' . "(错误代码：$error_code)",
		);
	}
	drupal_json_output ( $response );
}

function reset_password_by_sms_settings_form($form, &$form_state) {
	$form = array ();
	$form ['mobile_verify_sms_template'] = array (
			'#title' => '手机验证短信模板',
			'#type' => 'textarea',
			'#default_value' => variable_get ( 'reset_password_by_sms_template', RESET_PASSWORD_BY_SMS_TEMPLATE )
	);
	$form ['mobile_verify_sms_template_help'] = array (
			'#markup' => '模板中可用的变量：<br/><b>[site_name]</b> : 网站名称<br/><b>[code]</b> : 验证码'
	);
	$form ['actions'] = array (
			'#type' => 'actions'
	);
	$form ['actions'] ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( "Save" ),
			'#weight' => 10
	);
	return system_settings_form ( $form );
}

function _reset_password_by_sms_phone_mumber_validate($phone) {
	$result = preg_match('/^1[0-9]{10}$/', $phone);
	return $result;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reset_password_by_sms_form_user_login_block_alter(&$form, &$form_state) {
  $items = array();
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
    $items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
  }
  $items[] = l('用邮箱重置密码', 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
	$items[] = l('用手机重置密码', 'user/password_by_sms', array('attributes' => array('title' => '通过手机短消息重置密码。')));
  $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
	return $form;
}

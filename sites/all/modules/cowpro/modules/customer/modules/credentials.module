<?php
/**
 *  Implementation of hook_menu()
 */
function credentials_menu() {
	$items['credentials_remove/%/%'] = array(
			'title' => 'Credentials Remove',
			'page callback' => 'credentials_cowpro_customer_profile_remove_file_confirm',
			'page arguments' => array(1, 2),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
	);
	$items['credentials_select'] = array(
			'title' => 'Credentials Select',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'credentials_select_form',
			),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implements hook_views_api().
 */
function credentials_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'credentials') . '/includes/views',
  );
}

function credentials_cowpro_customer_profile_credentials_create($values) {
	$values += array(
			'files' => array(),//以数组的形式存放的证明文件的uri，数组中的每一项，存放一个uri
	);
	return $values;
}

function credentials_cowpro_customer_profile_credentials_save($profile) {
	$data = array();
	$data['files'] = $profile->files;
	$profile->data = $data;
	return $profile;
}

function credentials_cowpro_customer_profile_credentials_load($profile) {
	$profile->files = $profile->data['files'];
	return $profile;
}

function credentials_cowpro_customer_profile_credentials_form($form, &$form_state, $profile) {
	$_SESSION ['profile_uid'] = $profile->uid;

	// Include the CTools tools that we need.
	ctools_include('ajax');
	ctools_include('modal');

	// Add CTools' javascript to the page.
	ctools_modal_add_js();

	// Create a table that we can have data removed from via AJAX.
	$header = array(t('Row'), t('Content'), t('Actions'));
	$rows = array();
	$i = 0;
	foreach($profile->files as  $f) {
		$uri_md5 = md5($f['uri']);
		$rows[] = array(
				'class' => array('ajax-credentials-row-'. $i),
				'data' => array(
						$i,
						'<img src=' . file_create_url($f['uri']) . '>',
						ctools_ajax_text_button("remove", "credentials_remove/$i/$uri_md5", t('Delete this row'), 'credentials_remove'),
				),
		);
		$i++;
	}

	$output = theme('table', array('header' => $header, 'rows' => $rows, array('class' => array('ajax-credentials-table'))));

	$form['scanning_copy_uri'] = array(
			'#markup' => $output,
	);
	$form['file'] = array(
			'#type' => 'file',
			'#name' => 'files[]',
			'#title' => '证明文件',
			'#description' => '上传图片文件，可接受的文件格式为: png gif jpg jpeg.',
			'#size' => 22,
			'#attributes' => array('multiple' => 'multiple'),
	);

	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Upload'),
			'#submit' => array('credentials_form_submit'),
	);

	return $form;
}

function credentials_cowpro_customer_profile_credentials_form_validate($form, &$form_state, $profile) {
    //Save multiple files
    $num_files = count($_FILES['files']['name']);
    for ($i = 0; $i < $num_files; $i++) {
        $file = file_save_upload($i, array(
            'file_validate_is_image' => array(),
            'file_validate_extensions' => array('png gif jpg jpeg'),
        ));
        if ($file) {
            if ($file = file_move($file, 'public://')) {
                $form_state['values']['file'][$i] = $file;
            }
            else {
                form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
            }
        }
    }
}

//function credentials_cowpro_customer_profile_credentials_form_submit($form, &$form_state, &$profile) {
function credentials_form_submit($form, &$form_state) {
	if (!isset($_SESSION ['profile_uid'])) {
		drupal_set_message(t('SESSION失效，请刷新页面以后再试。'));
	} else {
		$uid = $_SESSION ['profile_uid'];
		$profile_credentials = cowpro_customer_profile_load_one_row_with_conditions($uid, 'credentials');
		foreach ($form_state['values']['file'] as $file) {
			$new_file = file_load($file->fid);
			$file_info = image_get_info($file->uri);
			$profile_credentials->files[]['uri'] = $file->uri;
		}

		cowpro_customer_profile_save($profile_credentials);
	}
}

function credentials_cowpro_customer_profile_credentials_extra_fields() {
	$result = array(
			'form' => array(
					'files' => array(
							'label' => '证明文件',
							'description' => '证明文件',
							'weight' => -9,
					),
			),
			'display' => array(
					'files' => array(
							'label' => '证明文件',
							'description' => '证明文件',
							'weight' => -9,
					),
				)
	);

	return $result;
}

/**
 * Implements hook_cowpro_customer_profile_type_info().
 */
function credentials_cowpro_customer_profile_type_info() {
	$profile_types = array();

	$profile_types['credentials'] = array(
			'type' => 'credentials',
			'name' => '证明文件',
			'description' => '贷款人在填写贷款申请表的时候可以从中选择需要的证明文件，这样可以方便贷款申请人多次贷款。',
			'help' => '',
			'weight' => 100,
	);

	return $profile_types;
}

function credentials_cowpro_customer_profile_remove_file($row, $uri_md5) {
	ctools_include('modal');
	ctools_include('ajax');
	$commands = array();

	if (!isset($_SESSION ['profile_uid'])) {
		$commands[] = ajax_command_alert('删除文件失败，请刷新页面以后再试。');
	} else {
		$uid = $_SESSION ['profile_uid'];
		$profile_credentials = cowpro_customer_profile_load_one_row_with_conditions($uid, 'credentials');
		$uri_list = array();
		foreach ($profile_credentials->files as $f) {
			$current_uri_md5 = md5($f['uri']);
			if ($current_uri_md5 != $uri_md5) {
				$uri_list[]['uri'] = $f['uri'];
 			}
		}
		$profile_credentials->files = $uri_list;
		cowpro_customer_profile_save($profile_credentials);

		$commands[] = ajax_command_remove("tr.ajax-credentials-row-$row");
		$commands[] = ajax_command_restripe("table.ajax-credentials-table");
		$commands[] = ctools_modal_command_dismiss();
	}
	print ajax_render($commands);
	exit;
}

function credentials_cowpro_customer_profile_remove_file_confirm($row, $uri_md5) {
	ctools_include('modal');
	ctools_include('ajax');
	$form_state = array(
			'title' => t('Delete'),
			'ajax' => TRUE,
			'row' => $row,
			'uri_md5' => $uri_md5,
	);
	$output = ctools_modal_form_wrapper('credentials_delete_form', $form_state);
	if (empty($output)) {
		$output[] = ctools_ajax_command_reload();
	}
	print ajax_render($output);
	drupal_exit();
}

function credentials_delete_form($form_state = NULL){
	$form['message'] = array(
			'#prefix' => '<div class="delete_message">',
			'#value' => t('Are you sure want to delete?'),
			'#suffix' => '</div>',
	);
	$form['submit']['delete'] = array(
			'#prefix' => "<div id = 'delete_button'>",
			'#suffix' => "</div>",
			'#value' => t('Delete'),
			'#type' => 'submit',
			'#submit' => array('delete_form_submit'),
	);
	$form['submit']['cancel'] = array(
			'#prefix' => "<div id = 'cancel_button'>",
			'#suffix' => "</span></div>",
			'#value' => t('Cancel'),
			'#type' => 'submit',
	);
	return $form;
}

function credentials_delete_form_submit($form, &$form_state) {
	if ($form_state['triggering_element']['#value'] == t('Cancel')) {
		ctools_include('modal');
		ctools_include('ajax');
		$commands = array();
		$commands[] = ctools_modal_command_dismiss();
		print ajax_render($commands);
		exit;
	} else {
		credentials_cowpro_customer_profile_remove_file($form_state['row'], $form_state['uri_md5']);
	}
}

function credentials_select_form($form, &$form_state) {
	$form['message'] = array(
			'#prefix' => '<div class="delete_message">',
			'#value' => t('Are you sure want to delete?'),
			'#suffix' => '</div>',
	);
	$form['submit']['delete'] = array(
			'#prefix' => "<div id = 'delete_button'>",
			'#suffix' => "</div>",
			'#value' => t('Delete'),
			'#type' => 'submit',
			'#submit' => array('delete_form_submit'),
	);
	$form['submit']['cancel'] = array(
			'#prefix' => "<div id = 'cancel_button'>",
			'#suffix' => "</span></div>",
			'#value' => t('Cancel'),
			'#type' => 'submit',
	);
	return $form;
}

/**
 * Form submit handler for node_form().
 *
 * Upon preview and final submission, we need to renumber poll choices and
 * create a teaser output.
 */
function credentials_node_form_submit(&$form, &$form_state) {
	// Renumber choices.
	$form_state['values']['choice'] = array_values($form_state['values']['choice']);
	$form_state['values']['teaser'] = poll_teaser((object) $form_state['values']);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function credentials_field_widget_form_alter(&$element, &$form_state, $context) {
	switch ($context['instance']['widget']['type']) {
		case 'user_reference_autocomplete':
			ctools_include('ajax');
			ctools_include('modal');
			ctools_modal_add_js();

			$element[] = array(
				'#markup' => ctools_ajax_text_button("选择常用证明文件", "credentials_select", t('Select credentials')),
			);
			break;
	}
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Alters language fields on node edit forms when a translation is about to be
 * created.
 *
 * @see node_form()
 */
function credentials_form_node_form_alter(&$form, &$form_state) {
	if ($form['#node']->type == 'cowpro_issuing') {
		$node = $form['#node'];
		$languages = language_list('enabled');
		$disabled_languages = isset($languages[0]) ? $languages[0] : FALSE;
		$translator_widget = $disabled_languages && user_access('translate content');
		$groups = array(t('Disabled'), t('Enabled'));
		// Allow translators to enter content in disabled languages. Translators
		// might need to distinguish between enabled and disabled languages, hence
		// we divide them in two option groups.
		if ($translator_widget) {
			$options = array($groups[1] => array(LANGUAGE_NONE => t('Language neutral')));
			$language_list = locale_language_list('name', TRUE);
			foreach (array(1, 0) as $status) {
				$group = $groups[$status];
				foreach ($languages[$status] as $langcode => $language) {
					$options[$group][$langcode] = $language_list[$langcode];
				}
			}
			$form['language']['#options'] = $options;
		}
		if (!empty($node->translation_source)) {
			// We are creating a translation. Add values and lock language field.
			$form['translation_source'] = array('#type' => 'value', '#value' => $node->translation_source);
			$form['language']['#disabled'] = TRUE;
		}
		elseif (!empty($node->nid) && !empty($node->tnid)) {
			// Disable languages for existing translations, so it is not possible to switch this
			// node to some language which is already in the translation set. Also remove the
			// language neutral option.
			unset($form['language']['#options'][LANGUAGE_NONE]);
			foreach (translation_node_get_translations($node->tnid) as $langcode => $translation) {
				if ($translation->nid != $node->nid) {
					if ($translator_widget) {
						$group = $groups[(int)!isset($disabled_languages[$langcode])];
						unset($form['language']['#options'][$group][$langcode]);
					}
					else {
						unset($form['language']['#options'][$langcode]);
					}
				}
			}
			// Add translation values and workflow options.
			$form['tnid'] = array('#type' => 'value', '#value' => $node->tnid);
			$form['translation'] = array(
					'#type' => 'fieldset',
					'#title' => t('Translation settings'),
					'#access' => user_access('translate content'),
					'#collapsible' => TRUE,
					'#collapsed' => !$node->translate,
					'#tree' => TRUE,
					'#weight' => 30,
			);
			if ($node->tnid == $node->nid) {
				// This is the source node of the translation
				$form['translation']['retranslate'] = array(
						'#type' => 'checkbox',
						'#title' => t('Flag translations as outdated'),
						'#default_value' => 0,
						'#description' => t('If you made a significant change, which means translations should be updated, you can flag all translations of this post as outdated. This will not change any other property of those posts, like whether they are published or not.'),
				);
				$form['translation']['status'] = array('#type' => 'value', '#value' => 0);
			}
			else {
				$form['translation']['status'] = array(
						'#type' => 'checkbox',
						'#title' => t('This translation needs to be updated'),
						'#default_value' => $node->translate,
						'#description' => t('When this option is checked, this translation needs to be updated because the source post has changed. Uncheck when the translation is up to date again.'),
				);
			}
		}
	}
}
